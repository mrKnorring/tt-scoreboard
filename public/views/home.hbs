<!-- public/views/home.hbs -->
<div x-data='state'>
	<div x-data='{ data: {{json user}} }'>

		<header class='flex w-full justify-center items-center relative'>
			<div class='absolute left-4 bottom-2'>
				<a href='/' target="_blank" class="text-2xl">üè†</a>
			</div>
			<h1 class='text-3xl mt-4 font-bold m-auto'>Inst√§llningar</h1>
			<div class='absolute right-4 bottom-2'>
				<a href='/logout'>Logga ut </a>
			</div>
		</header>
		<h3 class='text-xl text-center'>
			<span>{{user.name}}</span>
			<span class='uppercase'>({{user.username}})</span>
		</h3>

		<main class='p-4 max-w-screen-lg m-auto'>
			<section class="flex gap-6">
				<div class="w-full">

					<input name='courtTitle' type='text' class='form-input' placeholder="Arena"
						x-model="data.venue.name" />
				</div>
				<button class='form-btn max-w-24' @click="saveVenue(data.venue)">Spara</button>

			</section>

			{{! SEARCH CLUB }}
			<section class="flex gap-6 ">
				<aside class="w-full">
					<h3 class='text-xl'>S√∂k klubb</h3>
					<div class='my-2 grid grid-cols-4 gap-4'>
						<div class='col-span-3'>
							<input id='search' name='search' type='text' autocomplete='current-search'
								class='form-input' placeholder='S√∂k klubb' x-model='search' @keyup.enter='searchClub' />

						</div>
						<div class='col-span-1'>
							<button class='form-btn' @click='searchClub'>S√∂k</button>
						</div>
					</div>
				</aside>
				<aside class="w-1/3 h-36">
					<div x-show='open' class="text-center flex justify-center flex-col items-center">
						<template x-if='clubUrl'>
							<img :src='clubUrl' class='max-w-32' />
						</template>
						<template x-if='!clubUrl'>
							<img src='/public/no-logo.png' class='max-w-32' />
						</template>
						<strong x-text='clubName'></strong>
					</div>
				</aside>
			</section>
			<h2 class="text-2xl mt-4">Banor</h2>
			<template x-for="(court, i) in data.venue.courts">
				<section class="relative">
					<span class="remove" @click="removeCourt(data.venue.courts, i)">
						x
					</span>
					<div class="flex justify-center gap-2">
						<div class="cursor-pointer flex items-center" @click="court.collapsed = !court.collapsed">

							<template x-if='court.collapsed'>
								<span>&#9660;</span>
							</template>
							<template x-if='!court.collapsed'>
								<span>&#9650;</span>
							</template>
						</div>
						<input name='courtTitle' type='text' class='form-input' placeholder="Arrangemang"
							x-model="court.title" />
						<a x-bind:href="'/court/' + court.courtId" target="_blank" class="text-2xl">üåê</a>
					</div>
					<div x-show="!court.collapsed" x-collapse>

						<table class="mt-4">
							<tr>
								<td>
									<h3>Bakgrund: </h3>
								</td>
								<td>
									<div class="ml-4 flex gap-4 items-baseline h-full">
										<template x-for="c in bgColors">
											<div class="w-4 h-4 rounded-sm cursor-pointer border-2 border-opacity-0 border-white border-dashed"
												:class="{[c]:true, 'border-opacity-75': c === court.style.bg}"
												@click="court.style.bg = c"></div>
										</template>

									</div>
								</td>
							</tr>
							<tr>
								<td>
									<h3>Text: </h3>
								</td>
								<td>

									<div class="ml-4 flex gap-4 items-baseline h-full">
										<div class="w-4 h-4 rounded-sm cursor-pointer border-2 border-opacity-0 border-white bg-black border-dashed "
											:class="{ 'border-opacity-75': 'text-black' === court.style.font}"
											@click="court.style.font = 'text-black'"></div>
										<div class="w-4 h-4 rounded-sm cursor-pointer border-2 border-opacity-0 border-black bg-white border-dashed"
											:class="{ 'border-opacity-75': 'text-white' === court.style.font}"
											@click="court.style.font = 'text-white'"></div>

									</div>
								</td>
							</tr>
						</table>
						<table class='w-full mt-6 mb-3 border-collapse border-slate-400'>
							<template x-for="(match, index) in court.matches" :key="match.id">
								<tbody>
									<tr>
										<td class='border border-slate-400' rowspan="2">
											<input name='search' type='text' class='form-input' x-model="match.table" />

										</td>
										<td class='border border-slate-400 text-center'>
											<div class='flex justify-center w-full'>
												<template x-if="match.homeTeam.image">
													<div class="relative flex justify-center">
														<img :src="match.homeTeam.image" class='max-w-12' />
														<span class="remove" @click="removeImage(match.homeTeam)">
															x
														</span>
													</div>
												</template>
												<template x-if="!match.homeTeam.image">
													<span class='font-bold cursor-pointer text-xl'
														@click="addImage(match.homeTeam)">+</span>
												</template>
											</div>
										</td>
										<td class='border border-slate-400'>
											<input name='homeTeamName' type='text' class='form-input'
												x-model="match.homeTeam.name" />
										</td>
										<td class='border border-slate-400'>
											<input name='homeTeamScore' type='text' class='form-input'
												x-model="match.homeTeam.score" />
										</td>
										<td rowspan='2' class='border border-slate-400 px-2'>
											<div class='flex flex-col gap-2'>
												<button class='form-btn btn-danger'
													@click="removeMatch(court.matches, index)">Ta bort</button>
											</div>
										</td>
									</tr>

									<tr>
										<td class='border border-slate-400'>
											<div class='flex justify-center w-full'>
												<template x-if="match.awayTeam.image">
													<div class="relative flex justify-center">
														<img :src="match.awayTeam.image" class='max-w-12' />
														<span class="remove" @click="removeImage(match.awayTeam)">
															x
														</span>
													</div>
												</template>
												<template x-if="!match.awayTeam.image">
													<span class='font-bold cursor-pointer text-xl'
														@click="addImage(match.awayTeam)">+</span>
												</template>
											</div>
										</td>
										<td class='border border-slate-400'>
											<input name='awayTeamName' type='text' class='form-input'
												x-model="match.awayTeam.name" />

										</td>
										<td class='border border-slate-400'>
											<input name='awayTeamScore' type='text' class='form-input'
												x-model="match.awayTeam.score" />
										</td>
									</tr>
								</tbody>
							</template>
						</table>
						<div class="flex mb-3">
							<button class='form-btn btn-lime !w-auto' @click="addMatch(court.matches)">Ny match</button>
						</div>
						<div class="flex justify-end">
							<button class='form-btn max-w-24' @click="saveVenue(data.venue)">Spara</button>
						</div>
					</div>

				</section>
			</template>
			<div class="flex my-3">
				<button class='form-btn btn-emerald !w-auto' @click="addCourt(data.venue.courts)">Ny Bana</button>
			</div>

			{{! CHANGE PASSWORD }}
			<section class="mb-20">
				<h3 class='text-xl cursor-pointer' @click='passwordExpanded = !passwordExpanded'>
					√Ñndra l√∂senord
					<template x-if='!passwordExpanded'>
						<span class='ml-1'>&#9660;</span>
					</template>
					<template x-if='passwordExpanded'>
						<span class='ml-1'>&#9650;</span>
					</template>
				</h3>
				<div x-show='passwordExpanded' x-collapse>
					<div class='my-2 grid grid-cols-7 gap-4'>

						<div class='col-span-3'>
							<input id='newPassword' name='newPassword' type='password' class='form-input'
								placeholder='Nytt l√∂senord' x-model='newPassword' x-model='newPassword' />

						</div>
						<div class='col-span-3'>
							<input id='confirmPassword' name='confirmPassword' type='password' class='form-input'
								placeholder='Bekr√§fta l√∂senord' x-model='confirmPassword' x-model='confirmPassword' />
						</div>
						<div class='col-span-1'>
							<button class='form-btn' @click='changePassword' x-bind:disabled='disableNewPasswordBtn'>
								Spara
							</button>
						</div>
					</div>
					<template x-if='passwordMessage'>
						<p class='mt-2 ml-2 text-sm text-gray-500' x-text='passwordMessage'></p>
					</template>
				</div>
			</section>
		</main>
	</div>
	{{! TOAST }}

	<div
		class="fixed bottom-0 inset-0 flex items-start justify-center px-4 pt-6 pb-3 pointer-events-none sm:p-6 sm:items-end sm:justify-end">
		<div x-show="toastVisible" x-transition:enter="transform ease-out duration-300 transition"
			x-transition:enter-start="translate-y-2 opacity-0 sm:translate-y-0 sm:translate-x-2"
			x-transition:enter-end="translate-y-0 opacity-100 sm:translate-x-0"
			x-transition:leave="transition ease-in duration-100" x-transition:leave-start="opacity-100"
			x-transition:leave-end="opacity-0"
			:class="{'bg-green-500': toastType === 'success', 'bg-red-500': toastType === 'error'}"
			class="max-w-xs w-full text-white  shadow-lg rounded-lg pointer-events-auto cursor-pointer"
			@click="hideToast">
			<div class="rounded-lg shadow-xs overflow-hidden">
				<div class="p-4">
					<div class="flex items-center">
						<div class="flex-shrink-0">
							<svg x-show="toastType === 'success'" class="h-8 w-8 text-white" fill="none"
								stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
									d="M5 13l4 4L19 7"></path>
							</svg>
							<svg x-show="toastType === 'error'" class="h-6 w-6 text-white" fill="none"
								stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
									d="M6 18L18 6M6 6l12 12"></path>
							</svg>
						</div>
						<div class="ml-3 w-0 flex-1 pt-0.5">
							<p class="text-md font-medium " x-text="toastTitle"></p>
							<p class="mt-1 text-md text-gray-100" x-text="toastMessage"></p>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

</div>

<script>

	// FUNCTIONS


	const fetchClub = async (search) => {
		const url = 'https://api-pingiskalk-wwr1.onrender.com/clubs/search'
		const response = await fetch(url, {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({ search }),
		})
		return await response.json()
	}


	const postChangePassword = async (newPassword, confirmPassword) => {
		const url = '/users/change-password'
		const response = await fetch(url, {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({ newPassword, confirmPassword }),
		})
		return await response.json()
	}

	const postMatch = async (courtId, match) => {
		const url = '/users/match'
		const response = await fetch(url, {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({ courtId, match }),
		})
		return await response.json()
	}

	const postVenue = async (venue) => {
		const url = '/users/venue'
		const response = await fetch(url, {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({ venue }),
		})

		return await response
	}

	//	STATE
	document.addEventListener('alpine:init', () => {
		Alpine.data('state', () => ({
			open: false,
			clubUrl: '',
			clubName: '',
			search: '',
			newPassword: '',
			confirmPassword: '',
			passwordMessage: '',
			passwordExpanded: false,
			bgColors: ['bg-black', 'bg-gray-700', 'bg-gray-300', 'bg-blue-700', 'bg-blue-300', 'bg-red-700', 'bg-red-300', 'bg-green-700', 'bg-green-300', 'bg-yellow-400', 'bg-orange-400', 'bg-purple-700', 'bg-purple-300'],
			// toast
			toastVisible: false,
			toastTitle: '',
			toastMessage: '',
			toastType: 'success',
			showToast(title, message, type = 'success') {
				this.toastTitle = title;
				this.toastMessage = message;
				this.toastType = type;
				this.toastVisible = true;

				setTimeout(() => this.hideToast(), 3000);
			},
			hideToast() {
				this.toastVisible = false;
			},
			toggle() {
				this.open = !this.open
			},
			async searchClub() {
				this.open = false
				const club = await fetchClub(this.search)
				if (club) {
					if (club.image) {

						this.clubUrl = club.image.replaceAll('{size}', '300')
					} else {
						this.clubUrl = ''
					}
					this.clubName = club.alias
					this.open = true
				}
			},
			disableNewPasswordBtn() {
				return !(this.newPassword && this.newPassword === this.confirmPassword)
			},
			async changePassword() {
				this.passwordMessage = ''
				const res = await postChangePassword(this.newPassword, this.confirmPassword)
				if (res instanceof Object) {
					this.passwordMessage = 'L√∂senordet sparat'
					this.confirmPassword = ''
					this.newPassword = ''
				} else {
					this.passwordMessage = res.message
				}
			},
			async saveMatch(courtId, match) {
				const a = await postMatch(courtId, match)
				console.log(a)
			},
			async saveVenue(venue) {
				const response = await postVenue(venue)

				if (response.ok) {
					this.showToast('Ok', 'Sparad')
					console.log(await response.json())
				} else {
					this.showToast('Fel', 'N√•got gick fel', 'error')

				}
			},
			addMatch(array) {
				array.push({
					id: Math.floor(10000 + Math.random() * 90000),
					table: '',
					homeTeam: {
						score: 0,
						name: '',
						image: ''
					},
					awayTeam: {
						score: 0,
						name: '',
						image: ''
					},
				})
			},
			removeMatch(array, index) {
				array.splice(index, 1)
			},
			addImage(match) {
				if (this.clubUrl) {
					match.image = this.clubUrl
					this.open = false
					this.clubUrl = ''
					this.search = ''
					this.clubName = ''
				}
			},
			removeImage(match) {
				match.image = ''
			},
			addCourt(courts) {
				courts.push({
					courtId: Math.floor(100 + Math.random() * 900),
					title: '',
					style: {
						bg: 'bg-black',
						font: 'text-white'
					},
					matches: []
				})
			},
			removeCourt(courts, index) {
				if (confirm('√Ñr du s√§ker? Detta kan inte √•ngras!')) {
					courts.splice(index, 1)
				}
			}
		}))
	})
</script>